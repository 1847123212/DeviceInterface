<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LabNation.DeviceInterface.Memories
{
<#
	/*
	 * Resolving the filename needs to happen here (in this context), since 
	 * once we're in the class below we're in a TextProcessor sandbox where
	 * "this" won't mean "here"
	 */
	String hdlFile = this.Host.ResolvePath("Z:\\SmartScopeFpga\\hdl\\TypesConstants.vhd");
#>
<#=parseHdlToCSharpEnum(hdlFile,"REG") #>
<#=parseHdlToCSharpEnum(hdlFile,"STR") #>
<#=parseHdlToCSharpEnum(hdlFile,"ROM") #>
}
<#+
	public String parseHdlToCSharpEnum(String hdlFile, String registerType)
	{
		StreamReader file = new System.IO.StreamReader(hdlFile);
		String pattern = "^\\s*constant\\s+" + registerType +
							"_([a-zA-Z0-9_]+)\\s*:\\s*INTEGER\\s:=\\s*(\\d+)\\s*;.*$";
		Regex regex = new Regex(pattern, RegexOptions.IgnoreCase);

		//the name of the enum is simply the registerType
		String cSharpCode = "#if DEBUG\r\n\tpublic\r\n#else\r\n\tinternal\r\n#endif\r\n\t enum " + registerType + "\r\n" +
							 "    {\r\n";

		String line;
		while((line = file.ReadLine()) != null)
		{
			Match m = regex.Match(line);
			if(m.Groups.Count == 3) { //Group[0] contains the whole matched string
				cSharpCode += "\t\t" + m.Groups[1] + " = " + m.Groups[2] + ",\r\n";
			}
		}
		cSharpCode += "    }\r\n";

		file.Close();
	
		return cSharpCode;
	}

#>